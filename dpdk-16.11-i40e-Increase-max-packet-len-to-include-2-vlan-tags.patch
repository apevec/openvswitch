diff -pur openvswitch-2.6.1.orig/dpdk-16.11/drivers/net/i40e/i40e_ethdev.c openvswitch-2.6.1/dpdk-16.11/drivers/net/i40e/i40e_ethdev.c
--- openvswitch-2.6.1.orig/dpdk-16.11/drivers/net/i40e/i40e_ethdev.c	2018-01-04 05:33:46.952258610 -0500
+++ openvswitch-2.6.1/dpdk-16.11/drivers/net/i40e/i40e_ethdev.c	2018-01-04 08:04:15.791361237 -0500
@@ -9717,8 +9717,8 @@ i40e_dev_mtu_set(struct rte_eth_dev *dev
 {
 	struct i40e_pf *pf = I40E_DEV_PRIVATE_TO_PF(dev->data->dev_private);
 	struct rte_eth_dev_data *dev_data = pf->dev_data;
-	uint32_t frame_size = mtu + ETHER_HDR_LEN
-			      + ETHER_CRC_LEN + I40E_VLAN_TAG_SIZE;
+	uint32_t frame_size = mtu + ETHER_HDR_LEN + ETHER_CRC_LEN +
+			      2 * I40E_VLAN_TAG_SIZE;
 	int ret = 0;
 
 	/* check if mtu is within the allowed range */
diff -pur openvswitch-2.6.1.orig/dpdk-16.11/drivers/net/i40e/i40e_ethdev_vf.c openvswitch-2.6.1/dpdk-16.11/drivers/net/i40e/i40e_ethdev_vf.c
--- openvswitch-2.6.1.orig/dpdk-16.11/drivers/net/i40e/i40e_ethdev_vf.c	2018-01-04 05:33:46.933258601 -0500
+++ openvswitch-2.6.1/dpdk-16.11/drivers/net/i40e/i40e_ethdev_vf.c	2018-01-04 08:04:15.788361235 -0500
@@ -1763,7 +1763,7 @@ i40evf_rxq_init(struct rte_eth_dev *dev,
 	struct i40e_hw *hw = I40E_DEV_PRIVATE_TO_HW(dev->data->dev_private);
 	struct rte_eth_dev_data *dev_data = dev->data;
 	struct rte_pktmbuf_pool_private *mbp_priv;
-	uint16_t buf_size, len;
+	uint16_t buf_size, max_pkt_len, len;
 
 	rxq->qrx_tail = hw->hw_addr + I40E_QRX_TAIL1(rxq->queue_id);
 	I40E_PCI_REG_WRITE(rxq->qrx_tail, rxq->nb_rx_desc - 1);
@@ -1776,9 +1776,15 @@ i40evf_rxq_init(struct rte_eth_dev *dev,
 	rxq->hs_mode = i40e_header_split_none;
 	rxq->rx_hdr_len = 0;
 	rxq->rx_buf_len = RTE_ALIGN(buf_size, (1 << I40E_RXQ_CTX_DBUFF_SHIFT));
+
+	/* RHEL only:  Fortville doesn't account the VLAN Tags.
+	 * Upstream fixed by calling mtu_set API with the QinQ fix
+	 */
+	max_pkt_len = dev_data->dev_conf.rxmode.max_rx_pkt_len
+		      + 2 * I40E_VLAN_TAG_SIZE;
+
 	len = rxq->rx_buf_len * I40E_MAX_CHAINED_RX_BUFFERS;
-	rxq->max_pkt_len = RTE_MIN(len,
-		dev_data->dev_conf.rxmode.max_rx_pkt_len);
+	rxq->max_pkt_len = RTE_MIN(len, max_pkt_len);
 
 	/**
 	 * Check if the jumbo frame and maximum packet length are set correctly
@@ -1804,7 +1810,7 @@ i40evf_rxq_init(struct rte_eth_dev *dev,
 	}
 
 	if (dev_data->dev_conf.rxmode.enable_scatter ||
-	    (rxq->max_pkt_len + 2 * I40E_VLAN_TAG_SIZE) > buf_size) {
+	    rxq->max_pkt_len > buf_size) {
 		dev_data->scattered_rx = 1;
 	}
 
diff -pur openvswitch-2.6.1.orig/dpdk-16.11/drivers/net/i40e/i40e_rxtx.c openvswitch-2.6.1/dpdk-16.11/drivers/net/i40e/i40e_rxtx.c
--- openvswitch-2.6.1.orig/dpdk-16.11/drivers/net/i40e/i40e_rxtx.c	2018-01-04 05:33:46.944258606 -0500
+++ openvswitch-2.6.1/dpdk-16.11/drivers/net/i40e/i40e_rxtx.c	2018-01-04 08:05:29.584423268 -0500
@@ -2298,7 +2298,7 @@ i40e_rx_queue_config(struct i40e_rx_queu
 	struct i40e_pf *pf = I40E_VSI_TO_PF(rxq->vsi);
 	struct i40e_hw *hw = I40E_VSI_TO_HW(rxq->vsi);
 	struct rte_eth_dev_data *data = pf->dev_data;
-	uint16_t buf_size, len;
+	uint16_t buf_size, max_pkt_len, len;
 
 	buf_size = (uint16_t)(rte_pktmbuf_data_room_size(rxq->mp) -
 		RTE_PKTMBUF_HEADROOM);
@@ -2321,11 +2321,16 @@ i40e_rx_queue_config(struct i40e_rx_queu
 		break;
 	}
 
+	/* RHEL only:  Fortville doesn't account the VLAN Tags.
+	 * Upstream fixed by calling mtu_set API with the QinQ fix
+	 */
+	max_pkt_len = data->dev_conf.rxmode.max_rx_pkt_len
+		      + 2 * I40E_VLAN_TAG_SIZE;
+
 	len = hw->func_caps.rx_buf_chain_len * rxq->rx_buf_len;
-	rxq->max_pkt_len = RTE_MIN(len, data->dev_conf.rxmode.max_rx_pkt_len);
-	if (data->dev_conf.rxmode.jumbo_frame == 1) {
-		if (rxq->max_pkt_len <= ETHER_MAX_LEN ||
-			rxq->max_pkt_len > I40E_FRAME_SIZE_MAX) {
+	rxq->max_pkt_len = RTE_MIN(len, max_pkt_len);
+	if (rxq->max_pkt_len > ETHER_MAX_LEN) {
+		if (rxq->max_pkt_len > I40E_FRAME_SIZE_MAX) {
 			PMD_DRV_LOG(ERR, "maximum packet length must "
 				    "be larger than %u and smaller than %u,"
 				    "as jumbo frame is enabled",
@@ -2333,9 +2338,9 @@ i40e_rx_queue_config(struct i40e_rx_queu
 				    (uint32_t)I40E_FRAME_SIZE_MAX);
 			return I40E_ERR_CONFIG;
 		}
+		data->dev_conf.rxmode.jumbo_frame = 1;
 	} else {
-		if (rxq->max_pkt_len < ETHER_MIN_LEN ||
-			rxq->max_pkt_len > ETHER_MAX_LEN) {
+		if (rxq->max_pkt_len < ETHER_MIN_LEN) {
 			PMD_DRV_LOG(ERR, "maximum packet length must be "
 				    "larger than %u and smaller than %u, "
 				    "as jumbo frame is disabled",
@@ -2343,6 +2348,7 @@ i40e_rx_queue_config(struct i40e_rx_queu
 				    (uint32_t)ETHER_MAX_LEN);
 			return I40E_ERR_CONFIG;
 		}
+		data->dev_conf.rxmode.jumbo_frame = 0;
 	}
 
 	return 0;
@@ -2413,7 +2419,7 @@ i40e_rx_queue_init(struct i40e_rx_queue
 		RTE_PKTMBUF_HEADROOM);
 
 	/* Check if scattered RX needs to be used. */
-	if ((rxq->max_pkt_len + 2 * I40E_VLAN_TAG_SIZE) > buf_size) {
+	if (rxq->max_pkt_len > buf_size) {
 		dev_data->scattered_rx = 1;
 	}
 
